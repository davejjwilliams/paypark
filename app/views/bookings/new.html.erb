<div class="has-text-centered">
  <h1 class="title">New Booking</h1>
  <h2 class="subtitle"><%= @homeowner.address %></h2> <br>
</div>


<div class="columns is-gapless">
  <div class="column">
    <div onload="init()" class="box">
    <div id="scheduler_here" style='width:100%; height:500px;' class="dhx_cal_container is-paddingless">
      <div class="dhx_cal_navline">
        <div class="dhx_cal_prev_button">&nbsp;</div>
        <div class="dhx_cal_next_button">&nbsp;</div>
        <div class="dhx_cal_today_button"></div>
        <div class="dhx_cal_date"></div>
        <div class="dhx_cal_tab" name="day_tab" style="right:204px;"></div>
        <div class="dhx_cal_tab" name="week_tab" style="right:140px;"></div>
        <div class="dhx_cal_tab" name="month_tab" style="right:76px;"></div>
      </div>
      <div class="dhx_cal_header">
      </div>
      <div class="dhx_cal_data">
      </div>
    </div>
    </div>
  </div>
  <div class="column has-text-centered">
    <h2 class="subtitle">Available between <%= @homeowner.active_start.strftime("%F at %T") %>
      and <%= @homeowner.active_end.strftime("%F at %T") %></h2>
    <h2 class="subtitle">Price Per Hour: <%= number_to_currency(@homeowner.driveway_price, unit: "Â£") %></h2>
    <% if @homeowner.number_ratings > 0 %>
      <h2 class="subtitle">Average Rating: <%= (@homeowner.total_ratings.to_f / @homeowner.number_ratings).round(2) %>
        /5</h2>
    <% else %>
      <h2 class="subtitle">No Ratings Yet</h2>
    <% end %>
    <%= render 'form', booking: @booking %>
  </div>
</div>

<script>
    scheduler.config.readonly = true;
    scheduler.config.xml_date = "%Y-%m-%d %H:%i";
    scheduler.init("scheduler_here", new Date(), "week");
    scheduler.load("<%= data_path %>/", "json");

    var dp = new dataProcessor("<%= data_path %>/");
    dp.init(scheduler);
    dp.setTransactionMode("REST");

    // define configs
    const compactHeader = {
        rows: [
            {
                cols: [
                    "prev",
                    "date",
                    "next",
                ]
            },
            {
                cols: [
                    "day",
                    "week",
                    "spacer",
                    "today"
                ]
            }
        ]
    };

    const fullHeader = [
        "day",
        "week",
        "date",
        "prev",
        "today",
        "next"
    ];

    // add a switch to select an appropriate config for a current screen size

    function resetConfig(){
        let header;
        if (window.innerWidth < 1000) {
            header = compactHeader;
        } else {
            header = fullHeader;

        }
        scheduler.config.header = header;
        return true;
    }

    // apply the config initially and each time scheduler repaints or resizes:

    resetConfig();
    scheduler.attachEvent("onBeforeViewChange", resetConfig);
    scheduler.attachEvent("onSchedulerResize", resetConfig);

    scheduler.config.responsive_lightbox = true; // responsive lightbox

    scheduler.init("scheduler_here");

    $(function(){
        $('div[onload]').trigger('onload');
    });
</script>
